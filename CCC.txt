//#include<stdio.h>
//#include<stdlib.h>
//
//typedef struct node
//{
//	int data;
//	struct node*next;
//}node;
//
//node*shuru2(node*r,int n)
//{
//	node*e;
//	int x,i;
//	for(i=0;i<n;i++)
//	{
//		if(i==0)
//		{
//		node*p=(node*)malloc(sizeof(node));
//		scanf("%d",&x);
//		p->data=x;
//		e=p;
//		}
//		else
//		{
//		node*p=(node*)malloc(sizeof(node));
//		scanf("%d",&x);
//		p->data=x;
//		r->next=p;
//		}
//	}
//	return e;
//}
//
//
//
//void print(node*head)
//{
//	while(head!=NULL)
//	{
//		printf("%d",head->data);
//		head=head->next;
//	}
//}
//
//int main(void)
//{
//	node*head=NULL;
//	int n;
//	scanf("%d",&n);
//	head=shuru2(head,n);
//	print(head);
//	return 0;
//}
//第一题
//#include<stdio.h>
//
//int main(void)
//{
//	long long sum=0,i,jie,j;
//	for(i=1;i<=15;i++)
//	{
//		j=i;
//		jie=1;
//		for(j;j>0;j--)
//		{
//			jie=jie*j;
//		}
//		if(i%2!=0)
//		{
//			sum=sum+jie;
//		}
//		else if(i%2==0)
//		{
//			sum=sum-jie;
//		}
//	}
//	printf("%lld",sum);
//	return 0;
//}
//韩哥的代码
//#include<stdio.h>
//#include<stdlib.h>
//typedef struct node//定义结构体类型结点
//{
//    int data;
//    struct node*next;
//}node;
//
//void linklistVisit(node *head,int n) //链表遍历函数
//{
//    int i,j,count=0;
//    while(NULL!=head)
//    {
//        for(i=0;i<n;i++)
//        {
//            if(head->data%2!=0)
//			{
//				count++;
//			}
//            head=head->next;
//        }
//    }
//    printf("奇数的节点个数为%d",count);
//}
//
//node *creat(int n) //创建链表
//{
//    node *h=NULL;
//    int i,x;
//     for(i=0;i<n;i++)
//    {
//        node *p=(node*)malloc(sizeof(node));
//        scanf("%d",&x);
//        p->data=x;
//        p->next=h;
//        h=p;
//    }
//    return h;
//}
//int main(void)
//{
//    node *head;
//    int i,x,n,t;
//    scanf("%d",&n);
//    head=creat(n);
//    linklistVisit(head,n);
//    return 0;
//}

//#include<stdio.h>
//
//typedef struct student
//{
//	char num;
//	char name;
//	int yuwen;
//	int math;
//	int English;
//}xingxi;
//
//int main(void)
//{
//	int i,j;
//	float ave=0,sum=0,a;
//	xingxi arr[6];
//	float brr[6];
//	for(i=0;i<6;i++)
//	{
//		scanf("%s",&arr[i].num);
//		scanf("%s",&arr[i].name);
//		scanf("%d",&arr[i].yuwen);
//		scanf("%d",&arr[i].math);
//		scanf("%d",&arr[i].English);
//	}
//	/*for(i=0;i<6;i++)
//	{
//		scanf("%s %s %d %d %d",&arr[i].num,&arr[i].name,&arr[i].yuwen,&arr[i].math,&arr[i].English);
//	}*/
//	for(j=0;j<6;j++)
//	{
//		sum=0;
//		sum=arr[j].yuwen+arr[j].math+arr[j].English;
//		ave=sum/3;
//		brr[j]=ave;
//	}
//	a=brr[0];
//	for(i=0;i<6;i++)
//	{
//		if(brr[i]>a)
//			a=brr[i];
//	}
//	printf("%.2f\n",a);
//	return 0;
//}
//

//???????????????
//#include<stdio.h>
//int main(void)
//{ 
//    int  x = 102, y = 012;  
//    printf("%2d,%2d\n",x,y);
//    return 0;
//} 

//#include<stdio.h>
//#include<stdlib.h>
//typedef struct jiedian//定义结构体类型结点
//{
//    int data;
//    struct jiedian*next;
//}jiedian;
//jiedian *creat(int n);
//void linklistVisit(jiedian *head,int n);
//
//int main(void)
//{
//    jiedian *head;
//    int i,x,n,t;
//    scanf("%d",&n);
//    head=creat(n);
//    linklistVisit(head,n);
//
//    return 0;
//}
//
//void linklistVisit(jiedian *head,int n) //链表遍历函数
//{
//    int i,j,sum=0;
//    while(NULL!=head)
//    {
//        for(i=0;i<n;i++)
//        {
//            if(head->data%2!=0)
//            {
//                sum++;
//            }
//            head=head->next;
//        }
//    }
//    printf("%d",sum);
//}
//
//jiedian *creat(int n) //创建链表
//{
//    jiedian *h=NULL;
//    int i,x;
//     for(i=0;i<n;i++)
//    {
//        jiedian *p=(jiedian*)malloc(sizeof(jiedian));
//        scanf("%d",&x);
//        p->data=x;
//        p->next=h;
//        h=p;
//    }
//    return h;
//}

//#include<stdio.h>
//#include<stdlib.h>
//
//typedef struct node{
//	int data;
//	struct node*next;
//}node;
//
//node* create(int n)
//{
//	node*h=NULL;
//	int i,x;
//	for(i=0;i<n;i++)
//	{
//		node*p=(node*)malloc(sizeof(node));
//		scanf("%d",&x);
//		p->data=x;
//		p->next=h;
//		h=p;
//	}
//	return h;
//}
//
//void linkVisit(node*head,int n)
//{
//	while(head!=NULL)
//	{
//		printf("%d\n",head->data);
//		head=head->next;
//	}
//}
//
//int main(void)
//{
//	node*head;
//	int n;
//	scanf("%d",&n);
//	head=create(n);
//	linkVisit(head,n);
//	return 0;
//}

//#include<stdio.h>
//#include<string.h>
//
//typedef struct student
//{
//    char name[20];
//    int score;
//} STU;
//
//STU * find(STU * aStu, int n, char * aName);
//STU arr[5]={{"刘备",98},{"关羽",96},{"张飞",78},{"赵云",99},{"马超",91}};
//int main(void)
//{
//    int i,j;
//    char xm;
//    char aName[20];
//    STU*p;
//    printf("请输入姓名\n");
//    scanf("%s",aName);
//    p=find(arr,5,aName);
//    if(p!=NULL)
//    {
//        printf("%s %d",p->name,p->score);
//    }
//    else
//    {
//        printf("没有找到\n");
//    }
//    return 0;
//}
//
//STU * find(STU * aStu, int n, char * aName)
//{
//    int j;
//    for(j=0;j<n;j++)
//    {
//        if(strcmp(aName,aStu[j].name)==0)
//        {
//            return aStu+j;
//            break;
//        }
//    }
//    if(j==n)
//    {
//        return NULL;
//    }
//}

//#include<stdio.h>
//#include<string.h>
//
//typedef struct student
//{
//    char name[20];
//    int score;
//} STU;
//
//STU * find(STU * aStu, int n, char * aName){
//	int i;
//	for(i=0;i<n;i++)
//	{
//		if(strcmp(aName,aStu[i].name)==0)
//		{
//			return aStu+i;
//			break;
//		}
//	}
//	if(i==n)
//	{
//		return NULL;
//	}
//}
//
//int main(void)
//{
//	char aName[20];
//	STU*p;
//	STU arr[4]={{"大傻逼",21},{"二傻逼",34},{"三傻逼",98},{"四傻逼",23}};
//	scanf("%s",aName);
//	p=find(arr,4,aName);
//	if(p!=NULL)
//	{
//		printf("%s ",p->name);
//		printf("%d\n",p->score);
//	}
//	else
//	{
//		printf("没有找到");
//	}
//	return 0;
//}


//#include<stdio.h>
//
//typedef struct stu{
//	char name[20];
//	int src;
//}stu;
//
//int main(void)
//{
//	int i,j,cmp=0;
//	stu arr[5];
//	for(i=0;i<5;i++)
//	{
//		scanf("%s %d",&arr[i].name,&arr[i].src);
//	}
//	for(i=0;i<4;i++)
//	{
//		for(j=0;j<4-i;j++)
//		{
//			if(arr[j].src>arr[j+1].src)
//			{
//				cmp=arr[j+1].src;
//				arr[j+1].src=arr[j].src;
//				arr[j].src=cmp;
//			}
//		}
//	}
//	for(j=0;j<5;j++)
//	{
//		printf("%s %d\n",arr[j].name,arr[j].src);
//	}
//	return 0;
//}


//#include<stdio.h>
//
//int main(void)
//{
//	int arr[5]={1,2,3,4,5};
//	int i,j,tmp=0;
//	for(i=0;i<5;i++)
//	{
//		for(j=0;j<5-i;j++)
//		{
//			if(arr[j]<arr[j+1])
//			{
//				tmp=arr[j];
//				arr[j]=arr[j+1];
//				arr[j+1]=tmp;
//			}
//		}
//	}
//	for(i=0;i<5;i++)
//	{
//		printf("%d\n",arr[i]);
//	}
//	return 0;
//}

#include<stdio.h>

int main(void)
{
	int x[10]={0,1,2,3,4,5,6,7,8,9},*p;
	p=x+3;
	printf("%d",*(p+1));
	return 0;
}

//#include<stdio.h>
//#include<stdlib.h>
//
//typedef struct node{
//		int data;
//		struct node*next;
//}node;
//node *shuRu(int n)
//{
//	 //创建节点
//    int i, x;
//    node *h = NULL; //创建节点
//    for (i = 0; i < n; ++i)
//    {
//        node *p = (node *)malloc(sizeof(node)); //从堆区动态申请一块内存
//        scanf("%d", &x);                        //录入链表数据
//        p->data = x;                            //分配数据
//        p->next = h;                            //分配下一跳
//        h = p;
//    }
//	return h;
//}
//
//void nodePrintf(node*head)
//{
//	while (NULL != head)
//    {
//        printf("%d ", head->data); //打印数据
//        head = head->next;         //指向下一跳
//    }
//}
//
//
//int main(void)
//{
//	int n;
//	node *head;
//	scanf("%d",&n);
//	head=shuRu(n);
//	nodePrintf(head);
//	return 0;
//}


//int main(void)
//{
//    int arr[10];
//	int i,j,a=0;
//	for(i=0;i<10;i++)
//	{
//	scanf("%d",&arr[i]);
//	}
//	for(i=0;i<9;i++)
//	{
//		for(j=0;j<(9-i);j++)
//		{
//			if(arr[j]>arr[j+1])
//			{
//				a=arr[j+1];
//				arr[j+1]=arr[j];
//				arr[j]=a;
//			}
//		}
//	}
//	for(i=0;i<10;i++)
//	{
//		printf("%d ",arr[i]);
//	}
//    return 0;

// 定义一个函数，求字符串长度。
//#include<stdio.h>
//#include<string.h>
//int main(void)
//{
//	int a;
//	char name[100] = "GuanYuhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh";
//	char ch[6]="abcde"; 
//	a = strlen(name);
//	printf("%d\n",a);
//	return 0;
//}


//malloc函数动态分配数组长度
//#include<stdio.h>
//#include<stdlib.h>
//void visit(int len)
//{
//	int i;
//	int *arr = (int *)malloc(sizeof(int)*len);
//	for(i=0;i<len;i++)
//	{
//		scanf("%d",arr+i);
//	}
//	for(i=0;i<len;i++)
//	{
//		printf("%d\t",*(arr+i));
//	}
//	free(arr);
//}
//int main(void)
//{
//	int len;
//	scanf("%d",&len);
//	visit(len);
//	return 0;
//}

//不能嵌套定义  即是
//function a(){
//    function b(){
//
// }
//}


//函数值传递和地址传递

//值传递
//#include<stdio.h>
//void swap1(int x,int y)
//{
//	int temp;
//	temp = x;
//	x = y;
//	y = temp;
//	printf("x = %d,y = %d\n",x,y);	
//}
//int main(int argc, char *argv[]) 
//{
//	int a = 12,b = 24;
//    swap1(a,b); // 值传递 
//    printf("a = %d b = %d",a,b);
//}

//地址传递
//void swap2(int* x,int* y)
//{
//	int temp;
//	temp = *x;
//	*x = *y;
//	*y = temp;
//	printf("x = %d y = %d\n",*x,*y);
//}
//int main(int argc, char *argv[]) 
//{
//	int a = 12,b = 24;
//	swap2(&a,&b); //地址传递
//	printf("a = %d b = %d",a,b); 
//}

//#include<stdio.h>
//void printfArr(int *arr);
//int main(void)
//{
//	int j;
//	int arr[5]={1,2,3,4,5};
//	int *p=arr;
//	printfArr(arr);
//	for(j=0;j<5;j++)
//	{
//		printf("%d ",arr[j]);
//	}
//	return 0;
//}
//void printfArr(int *arr)
//{
//	int i;
//	int a=0;
//	for(i=0;i<5/2;i++)
//	{
//		a=arr[i];
//		arr[i]=arr[4-i];
//		arr[4-i]=a;
//	}
//	for(i=0;i<5;i++)
//	{
//		printf("%d\t",*(arr+i));
//	}
//}


//#include<stdio.h>
//#include<stdlib.h>
//int len;
//void arrA(int *arr)
//{
//	int i;
//	scanf("%d",&len);
//	for(i=0;i<len;i++)
//	{
//		scanf("%d",&arr[i]);
//	}
//}
//int main(void)
//{
//	int j;
//	int *arr = (int *)malloc(sizeof(int)*len);
//	arrA(arr);
//	for(j=0;j<len;j++)
//	{
//		printf("%d",arr[j]);
//	}
//	return 0;
//}


//#include<stdio.h>
//
//int main(void)
//{
//	typedef struct student{
//		char name;
//		char sex;
//		int scr[10];
//	}hhh;
//	int i;
//	hhh wy ={'wy','nan',{2020012302}};
//	printf("%c\n",wy.name);
//	printf("%c\n",wy.sex);
//	for(i=0;i<10;i++)
//	{
//		printf("%d\t",wy.scr[i]);
//	}
//	return 0;
//}


//#include<stdio.h>
//#include<math.h>
//
//struct point {
//    double x;
//    double y;
//};
//
//struct circle {
//    struct point center;
//    double r;
//};
//
//int intersect(struct circle A, struct circle B)
//{
//	double sum,len,r1,r2;
//	sum=  (A.center.x-B.center.x)*(A.center.x-B.center.x)+(A.center.y-B.center.y)*(A.center.y-B.center.y);
//	len = sqrt(sum);
//	r1=A.r+B.r;
//	if(A.r>B.r)
//	{
//		r2=A.r-B.r;
//	}
//	else
//	{
//		r2=B.r-A.r;
//	}
//	if((r2<len)&&(len<r1))
//	{
//		return 1;
//	}
//	else
//	{
//		return 0;
//	}
//}
//
//int main(void)
//{
//	struct circle m,n;
//	int x;
//	scanf("%lf %lf %lf",&m.center.x,&m.center.y,&m.r);
//	scanf("%lf %lf %lf",&n.center.x,&n.center.y,&n.r);
//	x=intersect(m,n);
//	if(x==0)
//	{
//		printf("No");
//	}
//	if(x==1)
//	{
//		printf("Yes");
//	}
//	return 0;
//}


//#include<stdio.h>
//#include<string.h>
//
//typedef struct student
//{
//    char name[20];
//    int score;
//} STU;
//
//STU * find(STU * aStu, int n, char * aName);
//STU arr[5]={{"刘备",98},{"关羽",96},{"张飞",78},{"赵云",99},{"马超",91}};
//int main(void)
//{
//	int i,j;
//	char xm;
//	char aName[20];
//	STU*p;
//	printf("请输入姓名\n");
//	scanf("%s",aName);
//	p=find(arr,5,aName);
//	if(p!=NULL)
//	{
//		printf("%s %d",p->name,p->score);
//	}
//	else
//	{
//		printf("没有找到\n");
//	}
//	return 0;
//}
//
//STU * find(STU * aStu, int n, char * aName)
//{
//	int j;
//	for(j=0;j<n;j++)
//	{
//		if(strcmp(aName,aStu[j].name)==0)
//		{
//			return aStu+j;
//			break;
//		}
//	}
//	if(j==n)
//	{
//		return NULL;
//	}
//}

#include<stdio.h>

struct node{
	int data;
	struct node*next;
};

int main(void)
{
	struct node n1,n2,n3;
	struct node*head,*p1;
	n1.data=11;
	n2.data=22;
	n3.data=33;
	head=&n1;
	n1.next=&n2;
	n2.next=&n3;
	n3.next=NULL;
	for(p1=head;p1!=NULL;p1=p1->next)
	{
		printf("%d\n",p1->data);
	}
	return 0;
}


//C语言函数调用机制
/*1.保护现场
2.为形式参数分配内存
3.将实参拷贝到形参中
4.执行被调函数
5.如果有return,将其后的值放在一个特殊的位置（这个位置大家都知道）
6.释放这次调用的内存
7.恢复现场*/

//无返回值类型函数
#include<stdio.h>
/*void hhh(void)
{
	printf("hhh\n");
	printf("hhh");
}

int main(void)
{
	hhh();
	return 0;
}*/

/*int sum(int a,int b)
{
	int c;
	c=a+b;
	return c;
}

int main(void)
{
	int c;
	c=sum(100,10);
	printf("%d\n",c);
	return 0;
}*/

//函数的递归调用（函数直接或间接的调用自身叫函数的递归调用）
/*条件
1.大问题可以化为小问题
2.小问题的解决方法和大问题相同
3.有一个递归结束的条件*/


//普通函数方法求阶乘
/*int jiecheng(int n)
{
	int m=1;
	for(n;n>0;n--)
	{
		m=m*n;
	}
	return m;
}

int main(void)
{
	int a;
	a =jiecheng(5);
	printf("%d\n",a);
	return 0;
}*/

//递归函数方法求阶乘
/*int jiec(int n)
{
	int daan;
	if(n==1)
	{
		daan=n;
		return daan;
	}
	else
	{
		daan=n*jiec(n-1);
		return daan;
	}
}

int main(void)
{
	int a;
	a=jiec(5);
	printf("%d\n",a);
	return 0;
}*/

//用函数方法求数组最大值
/*void max(int arr[])
{
	int length;
	int i,a,c;
	length = sizeof(arr) / sizeof(int); 
	a=arr[0];
	for(i=0;i<length;i++)
	{
		if(arr[i]>a)
		{
			a=arr[i];
		}
	}
	printf("%d\n",a);
}

int main(void)
{
	int arr[10]={1,2,3,4,5,6,7,8,9,0};
	int b;
	max(arr);
	return 0;
}*/

/*void bijiao(int *a,int len,int *p,int *q)
{
	int i;
	*p=a[0];
	*q=a[0];
	for(i=1;i<len;i++)
	{
		if(*p<a[i])
			*p=a[i];
		if(*q<a[i])
			*q=a[i];
	}
}*/

//数组内元素求和
//普通函数
/*int len;
void sum(int *p)
{
	int sum=0,j;
	for(j=0;j<len;j++)
	{
		sum=sum+p[j];
	}
	printf("%d\n",sum);
}
int main(void)
{
	int arr[5]={1,2,3,4,5};
	len=sizeof(arr)/sizeof(int);
	sum(arr);
	return 0;
}*/
//递归求数组和


#include<stdio.h>

int f(int x , int *p)
{
	int i,j,a=0;
	scanf("%d",&x);
	for(i=0;i<x;i++)
	{
		scanf("%d",&p[i]);
	}
	for(i=0;i<x-1;i++)
	{
		for(j=0;j<x-1-i;j++)
		{
			if(p[j]>p[j+1])
			{
				a = p[j];
				p[j]=p[j+1];
				p[j+1]=a;
			}
		}
	}
	for(j=0;j<x;j++)
	{
		printf("%d ",p[j]);
	}
}

int main(void)
{
	int arr[10];
	f(10, arr);
	
	
	return 0;
}


